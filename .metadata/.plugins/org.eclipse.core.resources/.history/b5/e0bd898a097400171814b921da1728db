package com.fqyuan.hashtable;

public class HashTable {
	class LinkedHashEntry {
		private String key;
		private int value;
		private LinkedHashEntry next;

		public LinkedHashEntry(String key, int value) {
			this.key = key;
			this.value = value;
			this.next = null;
		}
	}

	private LinkedHashEntry[] table;
	private int TABLE_SIZE;
	private int size;

	// Constructor:
	public HashTable(int capacity) {
		TABLE_SIZE = capacity;
		table = new LinkedHashEntry[capacity];
		size = 0;
	}

	// Function to get number of key-value pair.
	public int getSize() {
		return size;
	}

	// Function to clear hashtable.
	public void makeEmpty() {
		// Do not use size to iterate here, or you'll get error output.
		for (int i = 0; i < TABLE_SIZE; i++)
			table[i] = null;
	}

	// Function to get value of a key.
	public int get(String key) {
		int hash = myHash(key) % TABLE_SIZE;
		if (table[hash] == null)
			return -1;
		else {
			LinkedHashEntry entry = table[hash];
			while (entry != null && !entry.key.equals(key))
				entry = entry.next;
			if (entry != null)
				return entry.value;
			else
				return -1;
		}

	}

	// Function to insert a key-value pair.
	public void insert(String key, int value) {
		int hash = myHash(key) % TABLE_SIZE;
		if (table[hash] == null) {
			table[hash] = new LinkedHashEntry(key, value);
		} else {
			LinkedHashEntry entry = table[hash];
			LinkedHashEntry prev = null;
			while (entry != null && !entry.key.equals(key)) {
				prev = entry;
				entry = entry.next;
			}
			if (entry.key.equals(key))
				entry.value = value;
			else
				prev.next = new LinkedHashEntry(key, value);
		}
		size++;
	}

	// Function to remove a key-value pair.
	public void remove(String key) {
		int hash = myHash(key)%TABLE_SIZE;
		if(table[hash]==null)
			return;
		else{
			LinkedHashEntry entry = table[hash];
			LinkedHashEntry prev = null;
			while(entry!=null && !entry.key.equals(key)){
				prev = entry;
				entry = entry.next;
			}
			if(entry==null)
				return;
			else{
				if(prev==null)
					table[hash] = entry.next;
				else
					prev.next = entry.next;
			}
		}
		size--;
	}

	// Function myHash() which gives a hash value for a given string.
	private int myHash(String key) {
		int hashValue = key.hashCode();
		hashValue %= TABLE_SIZE;
		if (hashValue < 0)
			hashValue += TABLE_SIZE;
		return hashValue;
	}

	// Function to traverse the hashtable.
	public void traverse() {
		for(int i=0; i<TABLE_SIZE; i++){
			System.out.print("Slot "+(i+1)+": ");
			LinkedHashEntry entry = table[i];
			while(entry!=null){
				System.out.print(entry.value+" ");
			}
		}
	}
}
